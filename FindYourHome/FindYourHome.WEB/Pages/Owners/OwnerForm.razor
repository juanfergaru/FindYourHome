@using FindYourHome.Shared.Entities;
@inject SweetAlertService swal

<NavigationLock OnBeforeInternalNavigation="OnBeforeInternalNavigation"></NavigationLock>
<EditForm EditContext="editContext" OnSubmit="OnSubmit">
    <DataAnnotationsValidator />
    <div class="mb-3">
        <label>Documento:</label>
        <div>
            <InputText class="form-control" @bind-Value="@Owner.Document" />
            <ValidationMessage For="@(() => Owner.Document)" />
        </div>
    </div>

    <div class="mb-3">
        <label>Nombre del Propietario:</label>
        <div>
            <InputText class="form-control" @bind-Value="@Owner.FirstName" />
            <ValidationMessage For="@(() => Owner.FirstName)" />
        </div>
    </div>
    
    <div class="mb-3">
        <label>Apellidos del Propietario:</label>
        <div>
            <InputText class="form-control" @bind-Value="@Owner.LastName" />
            <ValidationMessage For="@(() => Owner.LastName)" />
        </div>
    </div>
    <div class="mb-3">
        <label>Dirección:</label>
        <div>
            <InputText class="form-control" @bind-Value="@Owner.Address" />
            <ValidationMessage For="@(() => Owner.Address)" />
        </div>
    </div>
    <div class="mb-3">
        <label>Foto:</label>
        <div>
            <InputText class="form-control" @bind-Value="@Owner.Photo" />
            <ValidationMessage For="@(() => Owner.Photo)" />
        </div>
    </div>

    <button class="btn btn-primary" type="submit">Guardar Cambios</button>
    <button class="btn btn-success" type="button" @onclick="ReturnAction">Regresar</button>
</EditForm>

@code {


    private EditContext editContext = null!;

    protected override void OnInitialized()
    {
        editContext = new(Owner);
    }

    [EditorRequired]
    [Parameter]
    public Owner Owner { get; set; } = null!;

    [EditorRequired]
    [Parameter]
    public EventCallback OnSubmit { get; set; }

    [EditorRequired]
    [Parameter]
    public EventCallback ReturnAction { get; set; }

    public bool FormPostedSuccessfully { get; set; } = false;

    private async Task OnBeforeInternalNavigation(LocationChangingContext context)
    {
        var formWasEdited = editContext.IsModified();

        if (!formWasEdited)
        {
            return;
        }

        if (FormPostedSuccessfully)
        {
            return;
        }

        var result = await swal.FireAsync(new SweetAlertOptions
            {
                Title = "Confirmación",
                Text = "¿Deseas abandonar la página y perder los cambios?",
                Icon = SweetAlertIcon.Warning,
                ShowCancelButton = true
            });

        var confirm = !string.IsNullOrEmpty(result.Value);

        if (confirm)
        {
            return;
        }

        context.PreventNavigation();
    }
}

