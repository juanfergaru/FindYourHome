@page "/Contracts/edit/{Id:int}"

@using CurrieTechnologies.Razor.SweetAlert2;
@using FindYourHome.Shared.Entities;
@inject NavigationManager navigationManager
@inject IRepository repository
@inject SweetAlertService swal

<h3>Editar Contrato</h3>

@if (contract is null)
{
    <div class="align-items-center">
        <img src=" https://img.pikbest.com/png-images/20190918/cartoon-snail-loading-loading-gif-animation_2734139.png!bw700 " />
    </div>
}
else
{
    <ContractForm @ref="contractForm" Contract="contract" OwnershipList="ownerships" TenantList="Tenants" OnSubmit="Edit" ReturnAction="Return" />
}

@code {
    private Contract? contract;
    private ContractForm? contractForm;

    private List<Ownership> ownerships = new List<Ownership>();
    private List<Tenant> Tenants = new List<Tenant>();

    [Parameter]
    public int Id { get; set; }

    protected override async Task OnInitializedAsync()
    {
        var responseowners = await repository.Get<List<Ownership>>("api/Owners/combo");
        ownerships = responseowners.Response!;

        var responseadvisors = await repository.Get<List<Tenant>>("api/tenants/combo");
        Tenants = responseadvisors.Response!;

        var responseHTTP = await repository.Get<Contract>($"api/Contracts/{Id}");

        if (responseHTTP.Error)
        {
            if (responseHTTP.HttpResponseMessage.StatusCode == System.Net.HttpStatusCode.NotFound)
            {
                navigationManager.NavigateTo("Contracts");
            }
            else
            {
                var messageError = await responseHTTP.GetErrorMessageAsync();
                await swal.FireAsync("Error", messageError, SweetAlertIcon.Error);
            }
        }
        else
        {
            contract = responseHTTP.Response;
        }
    }

    private async Task Edit()
    {
        var responseHTTP = await repository.Put("api/Contracts", contract);

        if (responseHTTP.Error)
        {
            var mensajeError = await responseHTTP.GetErrorMessageAsync();
            await swal.FireAsync("Error", mensajeError, SweetAlertIcon.Error);
        }
        else
        {
            contractForm!.FormPostedSuccessfully = true;
            navigationManager.NavigateTo("Contracts");
        }
    }

    private void Return()
    {
        navigationManager.NavigateTo("Contracts");
    }
}